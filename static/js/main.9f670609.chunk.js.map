{"version":3,"sources":["components/Search.js","components/GroupListEntry.js","components/CompleteListEntry.js","components/GroupList.js","components/Nav.js","components/ToDoListEntry.js","components/ToDoList.js","components/ToDos.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","props","className","placeholder","value","searchVal","onChange","searchHandle","GroupListEntry","type","id","title","changeGroupNameHandle","onClick","selectGroupHandle","CompleteListEntry","viewDoneHandle","GroupList","groupTitles","map","titleSet","key","Nav","state","addGroupTitles","bind","createGroupHandle","newGroup","this","setState","titles","length","lastTitle","updateChosenGroup","event","newTitleSet","inputVal","target","Number","slice","forEach","class","chosenGroup","React","Component","ToDoListEntry","checkToDoHandle","htmlFor","description","writeToDoHandle","onKeyUp","controlToDoHandle","ToDoList","filteredToDos","list","toDos","filterToDos","func","filter","toDo","isDone","includes","groupTitle","toDosToShow","todo","ToDos","style","color","parseInt","Math","random","toString","createToDoHandle","App","selected","date","Date","alert","newArr","newToDos","keyCode","location","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f670609.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Search = props => (\n  <div>\n    <div>\n      <input\n        className=\"input-box\"\n        placeholder=\"search...\"\n        value={props.searchVal}\n        onChange={props.searchHandle}\n      />\n    </div>\n  </div>\n);\nexport default Search;\n","import React from \"react\";\n\nconst GroupListEntry = props => (\n  <div>\n    <input\n      className=\"input-box\"\n      type=\"text\"\n      id={\"gr-\" + props.id}\n      value={props.title}\n      onChange={props.changeGroupNameHandle}\n      onClick={props.selectGroupHandle}\n    />\n  </div>\n);\n\nexport default GroupListEntry;\n","import React from \"react\";\n\nconst CompleteListEntry = props => {\n  return <div onClick={props.viewDoneHandle}>예정됨</div>;\n};\n\nexport default CompleteListEntry;\n","import React from \"react\";\nimport GroupListEntry from \"./GroupListEntry\";\nimport CompleteListEntry from \"./CompleteListEntry\";\n\nconst GroupList = props => {\n  if (props.groupTitles === null) {\n    return (\n      <div className=\"filter-area\">\n        <CompleteListEntry viewDoneHandle={props.viewDoneHandle} />\n      </div>\n    );\n  } else\n    return (\n      <div>\n        <div className=\"filter-area\">\n          <CompleteListEntry viewDoneHandle={props.viewDoneHandle} />\n        </div>\n        <div>\n          {props.groupTitles.map(titleSet => (\n            <GroupListEntry\n              key={titleSet.id}\n              id={titleSet.id}\n              title={titleSet.title}\n              selectGroupHandle={props.selectGroupHandle}\n              changeGroupNameHandle={props.changeGroupNameHandle}\n            />\n          ))}\n        </div>\n      </div>\n    );\n};\nexport default GroupList;\n","import React from \"react\";\nimport Search from \"./Search\";\nimport GroupList from \"./GroupList\";\n\nclass Nav extends React.Component {\n  constructor(props) {\n    super();\n    this.state = { groupTitles: null };\n    this.addGroupTitles = this.addGroupTitles.bind(this);\n    this.createGroupHandle = this.createGroupHandle.bind(this);\n    this.changeGroupNameHandle = this.changeGroupNameHandle.bind(this);\n  }\n\n  // group명 추가 시\n  addGroupTitles(id) {\n    const newGroup = { id: id, title: \"새로운 목록\" + id };\n    if (this.state.groupTitles !== null) {\n      this.setState({ groupTitles: [...this.state.groupTitles, newGroup] });\n    } else {\n      this.setState({ groupTitles: [newGroup] });\n    }\n  }\n\n  // group 생성 버튼 클릭 시\n  createGroupHandle() {\n    const titles = this.state.groupTitles;\n    let id = titles !== null ? titles[titles.length - 1].id + 1 : 1;\n    this.addGroupTitles(id);\n    let lastTitle = \"새로운 목록\" + id;\n    this.props.updateChosenGroup(lastTitle);\n  }\n\n  // group명 변경 시\n  changeGroupNameHandle(event) {\n    let inputVal = event.target.value;\n    let id = Number(event.target.id.slice(3));\n    const newGroup = this.state.groupTitles.map(titleSet => {\n      if (id === titleSet.id) {\n        titleSet.title = inputVal;\n      }\n      return titleSet;\n    });\n    this.setState({ groupTitles: newGroup });\n    //여기서부터 기능 뜯기\n    let newTitleSet;\n    this.state.groupTitles.forEach(titleSet => {\n      if (titleSet.id === id) {\n        newTitleSet = titleSet;\n      }\n    });\n    this.props.updateChosenGroup(newTitleSet.title);\n    //app state toDo의 같은 이름 찾아서 바꿔주기 기능 필요\n  }\n\n  render() {\n    return (\n      <div className=\"section\">\n        <div className=\"col search-area\">\n          <div className=\"row\">\n            <i class=\"fa fa-search\"></i>\n            <Search\n              id=\"search-bar\"\n              searchVal={this.props.searchVal}\n              searchHandle={this.props.searchHandle}\n            />\n          </div>\n          <div>\n            <GroupList\n              groupTitles={this.state.groupTitles}\n              chosenGroup={this.props.chosenGroup}\n              viewDoneHandle={this.props.viewDoneHandle}\n              selectGroupHandle={this.props.selectGroupHandle}\n              changeGroupNameHandle={this.changeGroupNameHandle}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div>\n            <button id=\"create-btn\" onClick={this.createGroupHandle}>\n              +\n            </button>\n          </div>\n          <div>목록 추가</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Nav;\n","import React from \"react\";\n\nconst ToDoListEntry = props => {\n  return (\n    <div className=\"row\">\n      <div>\n        <input\n          type=\"checkbox\"\n          className=\"cb\"\n          id={\"bx-\" + props.id}\n          onClick={props.checkToDoHandle}\n        />\n        <label htmlFor=\"cb\"></label>\n      </div>\n      <input\n        type=\"text\"\n        className=\"margin\"\n        value={props.description}\n        id={props.id}\n        onChange={props.writeToDoHandle}\n        onKeyUp={props.controlToDoHandle}\n      />\n    </div>\n  );\n};\n\nexport default ToDoListEntry;\n","import React from \"react\";\nimport ToDoListEntry from \"./ToDoListEntry\";\n\nconst ToDoList = props => {\n  const toDosToShow = list => {\n    const filterToDos = func => {\n      return list.filter(func);\n    };\n\n    let toDos;\n    if (list) {\n      if (props.chosenGroup === \"완료한 리스트\") {\n        toDos = filterToDos(toDo => toDo.isDone === true);\n      } else if (props.searchVal) {\n        toDos = filterToDos(toDo => toDo.description.includes(props.searchVal));\n      } else {\n        toDos = filterToDos(toDo => toDo.groupTitle === props.chosenGroup);\n      }\n    }\n    return toDos;\n  };\n  const filteredToDos = toDosToShow(props.toDos);\n\n  return (\n    props.toDos && (\n      <div>\n        {filteredToDos.map(todo => (\n          <ToDoListEntry\n            key={todo.id}\n            id={\"toDo-\" + todo.id}\n            isDone={todo.isDone}\n            description={todo.description}\n            checkToDoHandle={props.checkToDoHandle}\n            writeToDoHandle={props.writeToDoHandle}\n            controlToDoHandle={props.controlToDoHandle}\n          />\n        ))}\n      </div>\n    )\n  );\n};\n\nexport default ToDoList;\n","import React from \"react\";\nimport ToDoList from \"./ToDoList\";\n\nconst ToDos = props => {\n  let style = { color: \"#\" + parseInt(Math.random() * 0xffffff).toString(16) };\n  return (\n    <div>\n      <div className=\"row btn-area font-size\">\n        <div style={style}>{props.chosenGroup}</div>\n        <div>\n          <button id=\"to-do-btn\" onClick={props.createToDoHandle}>\n            +\n          </button>\n        </div>\n      </div>\n      <div>\n        <ToDoList\n          toDos={props.toDos}\n          chosenGroup={props.chosenGroup}\n          searchVal={props.searchVal}\n          checkToDoHandle={props.checkToDoHandle}\n          writeToDoHandle={props.writeToDoHandle}\n          controlToDoHandle={props.controlToDoHandle}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ToDos;\n","import React from \"react\";\n\nimport Nav from \"./Nav\";\nimport ToDos from \"./ToDos\";\n\nimport \"../App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      chosenGroup: \"예정됨\",\n      toDos: null,\n      searchVal: \"\",\n      isDone: null\n    };\n    this.searchHandle = this.searchHandle.bind(this);\n    this.viewDoneHandle = this.viewDoneHandle.bind(this);\n    this.selectGroupHandle = this.selectGroupHandle.bind(this);\n\n    this.createToDoHandle = this.createToDoHandle.bind(this);\n    this.checkToDoHandle = this.checkToDoHandle.bind(this);\n    this.writeToDoHandle = this.writeToDoHandle.bind(this);\n    this.controlToDoHandle = this.controlToDoHandle.bind(this);\n\n    this.updateChosenGroup = this.updateChosenGroup.bind(this);\n    this.filterToDos = this.filterToDos.bind(this);\n  }\n\n  // 검색어 입력 시\n  searchHandle(event) {\n    let inputVal = event.target.value;\n    this.setState({ searchVal: inputVal });\n    if (inputVal === \"\") {\n      this.setState({ chosenGroup: \"예정됨\" });\n    } else {\n      this.setState({ chosenGroup: inputVal + \"에 대한 검색 결과\" });\n    }\n  }\n\n  // 완료된 리스트 클릭 시\n  viewDoneHandle() {\n    this.state.chosenGroup === \"완료한 리스트\"\n      ? this.setState({ chosenGroup: \"예정됨\" })\n      : this.setState({ chosenGroup: \"완료한 리스트\" });\n  }\n\n  // 그룹 타이틀 클릭 시\n  selectGroupHandle(event) {\n    let selected = event.target.value;\n    this.setState({ chosenGroup: selected });\n  }\n\n  // to-do 만들기 버튼 클릭 시\n  createToDoHandle() {\n    if (this.state.toDos) {\n      const toDos = this.state.toDos;\n      let id = toDos[toDos.length - 1].id + 1;\n      this.setState({\n        toDos: [\n          ...this.state.toDos,\n          {\n            id: id,\n            date: new Date(),\n            groupTitle: this.state.chosenGroup,\n            description: \"\",\n            isDone: false\n          }\n        ]\n      });\n    } else if (this.state.chosenGroup === \"예정됨\") {\n      alert(\"please choose to-do group first\");\n    } else {\n      this.setState({\n        toDos: [\n          {\n            id: 1,\n            date: new Date(),\n            groupTitle: this.state.chosenGroup,\n            description: \"\",\n            isDone: false\n          }\n        ]\n      });\n    }\n  }\n\n  // to-do 완료 유무 체크 시\n  checkToDoHandle(event) {\n    const id = Number(event.target.id.slice(8));\n    const newArr = this.state.toDos.map(toDo => {\n      if (id === toDo.id) {\n        toDo.isDone = !toDo.isDone;\n      }\n      return toDo;\n    });\n    this.setState({ toDos: newArr });\n  }\n\n  // 신규 to-do 내용 작성 시\n  writeToDoHandle(event) {\n    const inputVal = event.target.value;\n    const id = Number(event.target.id.slice(5));\n    const newToDos = this.state.toDos.map(toDo => {\n      if (id === toDo.id) {\n        toDo.description = inputVal;\n      }\n      return toDo;\n    });\n    this.setState({ toDos: newToDos });\n  }\n\n  // 신규 to-do 내용 등록 or 취소 시\n  controlToDoHandle(event) {\n    if (event.keyCode === 13) {\n      this.createToDoHandle();\n      //const currentId = event.target.id;\n      //const nextId = currentId.slice(0, 5) + (Number(currentId.slice(5)) + 1);\n    }\n    if (event.keyCode === 27) {\n      const id = Number(event.target.id.slice(5));\n      const newToDos = this.filterToDos(\n        this.state.toDos,\n        toDo => id !== toDo.id && toDo\n      );\n      this.setState({ toDos: newToDos });\n    }\n  }\n\n  // 현재 선택된 group 업데이트 시\n  updateChosenGroup(title) {\n    this.setState({ chosenGroup: title });\n  }\n\n  // to-do 필터 함수\n  filterToDos(location, func) {\n    return location.filter(func);\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"content-box\">\n          <div className=\"side\"></div>\n          <div id=\"contents\">\n            <div className=\"nav\">\n              <Nav\n                chosenGroup={this.state.chosenGroup}\n                searchVal={this.state.searchVal}\n                updateChosenGroup={this.updateChosenGroup}\n                viewDoneHandle={this.viewDoneHandle}\n                searchHandle={this.searchHandle}\n                selectGroupHandle={this.selectGroupHandle}\n              />\n            </div>\n            <div className=\"to-dos\">\n              <ToDos\n                toDos={this.state.toDos}\n                chosenGroup={this.state.chosenGroup}\n                searchVal={this.state.searchVal}\n                createToDoHandle={this.createToDoHandle}\n                checkToDoHandle={this.checkToDoHandle}\n                writeToDoHandle={this.writeToDoHandle}\n                controlToDoHandle={this.controlToDoHandle}\n              />\n            </div>\n          </div>\n          <div className=\"side\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}